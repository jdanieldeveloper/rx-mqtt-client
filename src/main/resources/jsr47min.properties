# logging.properties file.
# "handlers" specifies a comma separated list of log Handler
# classes. These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.

handlers = java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers. For any given facility this global level
# can be overriden by a facility-specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.

.level = FINEST

# Limit the messages that are printed on the console to INFO and above.

java.util.logging.ConsoleHandler.level = FINEST
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter



# Loggers
# ------------------------------------------
# A memory handler is attached to the Paho packages
# and the level specified to collect all trace related
# to Paho packages.  This will override any root/global
# level handlers if set.
org.eclipse.paho.client.mqttv3.level = INFO
org.eclipse.paho.client.mqttv3.handlers = java.util.logging.MemoryHandler

# It is possible to set more granular trace on a per class basis e.g.
# org.eclipse.paho.client.mqttv3.internal.ClientComms.level = ALL

# Handlers
# -----------------------------------------
# Note: the target handler that is associated with the Memory Handler is not a root handler
# and hence not returned when getting the handlers from root. It appears accessing
# target handler programmatically is not possible as target is a private variable in
# class MemoryHandler
java.util.logging.MemoryHandler.level = INFO
java.util.logging.MemoryHandler.size = 10000
java.util.logging.MemoryHandler.push = SEVERE
java.util.logging.MemoryHandler.target = java.util.logging.ConsoleHandler
